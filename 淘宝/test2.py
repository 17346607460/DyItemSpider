#coding:utf-8
import requests
from Crypto.Cipher import AES
from binascii import b2a_hex, a2b_hex
import json

# # 解密后，去掉补足的空格用strip() 去掉
# def decrypt(text):
#     key = 'sycmsycmsycmsycm'.encode('utf-8')
#     iv = b'mcysmcysmcysmcys'
#     mode = AES.MODE_CBC
#     cryptos = AES.new(key, mode, iv)
#     plain_text = cryptos.decrypt(a2b_hex(text))
#     res = bytes.decode(plain_text).rstrip('\0')
#     # print(res)
#     if res[0] == '[':
#         num = res.find(']',-16)
#         res = res[:num + 1]
#         try:
#             data = json.loads(res.replace('\t','').replace(' ', '').replace('：',':'),strict=False)
#         except Exception as e:
#             with open('报错的内容.txt','a') as f:
#                 f.write('错误:{}'.format(str(e)) + res + '\n\n')
#             data = ""
#         return data
#     elif res[0] == '{':
#         if res[-1] != '}':
#             num = res.find('}', -16)
#             res = res[:num + 1]
#         try:
#             data = json.loads(res.replace('\t', '').replace(' ', '').replace('：', ':'), strict=False)
#         except Exception as e:
#             with open('报错的内容.txt', 'a') as f:
#                 f.write('错误:{}'.format(str(e)) + res + '\n\n')
#             data = ""
#         return data

# 解密后，去掉补足的空格用strip() 去掉




# data = b
def decrypt(text):
    # print('text:',text)
    # key = 'sycmsycmsycmsycm'.encode('utf-8')
    # iv = b'mcysmcysmcysmcys'
    key = 'w28Cz694s63kBYk4'.encode('utf-8')# 密码
    iv = b'4kYBk36s496zC82w'# 偏移量
    mode = AES.MODE_CBC
    cryptos = AES.new(key, mode, iv)
    plain_text = cryptos.decrypt(a2b_hex(text))
    # print(bytes.decode(plain_text))
    res = bytes.decode(plain_text).rstrip('\0').replace('：', ':').replace('null', '0').replace("true",'\"true\"').replace("false", '\"false\"')
    # print(res)
    # .replace('\t','').replace(' ', '')
    # 取出最后一位字符
    try:
        last = res[-1]
        if last != ']' and last != '}':  # 如说last不等于 ] 和 } ,说明有填充，则替换掉
            res = res.replace(last, '')
    except IndexError:  # 报错则说明是空串， 返回false
        return False

    try:
        first = res[0]          # 判断字符串是字典还是列表
    except IndexError:         # 报此错说明是个空串
        return res

    first = res[0]
    if first == '[':
        # print(type(res))
        data = eval(res.replace('babe"true"','babetrue'))
        return data
    elif first == '{':
        data = json.loads(res.replace('babe"true"','babetrue'), strict=False)
        # data = res
        return data
    return res


# 店透视
def change_info(cateid, value, dts_cookie):
    # values = []
    # for i in value:
    #     values.append(str(int(i)))
    url = 'https://diantoushi.com/switch/v2/change'
    headers = {
        'accept': 'application/json, text/javascript, */*; q=0.01',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'zh-CN,zh;q=0.9',
        'cache-control': 'no-cache',
        'content-length': '63',
        'content-type': 'application/json',
        'cookie': dts_cookie,
        'origin': 'https://www.diantoushi.com',
        'pragma': 'no-cache',
        'referer': 'https://www.diantoushi.com/index.html',
        'sec-ch-ua': '"Chromium";v="94", "Google Chrome";v="94", ";Not A Brand";v="99"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': "Windows",
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-origin',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.54 Safari/537.36',
        'x-requested-with': 'XMLHttpRequest'
    }
    data = {"categoryId": "50014812", "changeType": "1", "indexTrans": '[{"' + value[0] + '":"' + str(value[1]) + '","num":1}]'}
    # data = {"categoryId": cateid, "changeType": "1", "indexTrans": '[{"' + value[0] + '":"' + str(value[1]) + '","num":1}]'}
    response = requests.post(url=url, headers=headers, json=data).json()
    return response['data'][0][value[0]+'Change']


# if __name__ == '__main__':
    # change_info("50252001", ['sePvIndex', 208877], 'Hm_lvt_623a6e6c9e21142aa93edc3fffb24a30=1663579827; token=80265f3e-7127-4e7a-af6b-5d3f450d00b5; Hm_lpvt_623a6e6c9e21142aa93edc3fffb24a30=1663583486')
